@import "variables";

@mixin invalid-input {
    border: 2px solid var(--cl-error);
}

input, textarea, select, ng-select > .ng-select-container {
    display: block;
    height: $inputHeight;
    border-radius: var(--input-border-radius);
    width: 100%;
    padding: 1px 12px 0;
    font-family: $font;
    font-size: 14px;
    color: var(--cl-txt);
    background-color: #fff;
    background-image: none;
    border: 1px solid #ccc;
    box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
    transition: border-color ease-in-out $animSpeed,
                color ease-in-out $animSpeed;
    outline: none;
    &:focus {
        color: var(--cl-txt-main);
        border: 2px solid var(--cl-accent);
        padding: 1px 11px 0;
    }

    // Invalid for angular to set automatically
    &.ng-touched.ng-invalid {
       @include invalid-input;
    }

    // Invalid class to set manually
    &.ng-touched.invalid {
        @include invalid-input;
    }

    // This style needed to show invalid immediately, without checking for touched
    // Used on arrays, during save
    &.invalid-force {
        @include invalid-input;
    }

    &::placeholder {
        font-family: $font;
    }
}
textarea {
    font-family: $font;
    padding-top: 8px;
    padding-bottom: 8px;
    &:focus {
        padding: 1px 12px 0;
        padding-top: 8px;
        padding-bottom: 7px;
    }
}

input[type=checkbox] {
    margin: 0;
    width: $inputHeight;
}
input:not([type=checkbox]), textarea {
    -moz-appearance: none;
    -webkit-appearance: none;
}

.btn {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    font-family: $font;
    color: var(--cl-txt-btn);
    padding: 0 12px;
    margin-bottom: 0;
    height: $button-height;
    font-size: 16px;
    text-align: center;
    white-space: nowrap;
    vertical-align: middle;
    -ms-touch-action: manipulation;
    touch-action: manipulation;
    cursor: pointer;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    background-image: none;
    border: 1px solid transparent;
    box-shadow: rgba(0, 0, 0, 0.3) 0 1px 2px 0;
    transition: background-color $animSpeed linear;
    border-radius: 4px;
    outline: 0;

    // Icon
    & > mat-icon {
        margin-left: -8px;
    }

    &:active {
        transform: translateY(1px);
        box-shadow: rgba(0, 0, 0, 0.3) 0 1px 1px 0;
    }

    &:focus {
        border: 2px solid var(--cl-accent);
    }

    // Disabled button state
    &[disabled] {
        pointer-events: none;
        opacity: 0.5;
        filter: grayscale(1);
    }
}

label {
    font-family: $font;
    color: var(--cl-txt);
    display: inline-block;
    margin-bottom: 2px;
}

.btn-success {
    background-color: var(--cl-btn-bg);
    border-color: var(--cl-btn-border);

    &:hover {
        background-color: var(--cl-btn-hover);
    }
}

.btn-text {
    color: var(--cl-txt-main);
    box-shadow: none;
    border: none;
    background-color: transparent;

    &:hover {
        background-color: var(--cl-row-hover);
    }
}

// Button with icon for datepicker, etc.
.btn-icon {
    border: none;
    background-color: transparent;
    box-shadow: none;
    color: var(--cl-txt);
    outline: none;
    &:active, &:focus {
        outline: none;
        border: none;
        box-shadow: none;
    }

    & > mat-icon {
        margin: 0;
    }
}

// Link button for object fields
.btn-link {
    color: var(--cl-txt);
    width: 36px;
    height: 36px;
    text-decoration: none;
    border: none;
    opacity: 0.6;
    background-color: transparent;
    justify-content: center;
    align-items: center;
    margin-left: 4px;
    vertical-align: top;
    display: inline-flex;

    & > mat-icon {
        width: auto;
        height: auto;
        font-size: 32px;
        transform: scaleX(-1) translateY(-3px);
    }
}

// Invalid state of ng-select
ng-select.ng-invalid.ng-touched .ng-select-container {
    @include invalid-input;
}
ng-select.invalid-force {
    @include invalid-input;
}

// Fix ng select styles
ng-select > .ng-select-container {
    padding: 0;

    // Text during editing in input
    & .ng-input > input {
        margin-left: -12px;
        margin-top: -4px;

        font-family: $font;
        font-size: 16px;
        color: var(--cl-txt-main);
    }

    // text after editing
    & .ng-value-label {
        font-family: $font;
        font-size: 16px;
        color: var(--cl-txt-main);
    }
}

// Multi select style
ng-select.multiple > .ng-select-container {
    min-height: 36px;
    height: auto;
}

// Removed glow of nf-select
.ng-select.ng-select-focused:not(.ng-select-opened)>.ng-select-container {
    box-shadow: none;
}

ng-select.ng-select-focused > .ng-select-container  {
    border: 2px solid var(--cl-accent);
}

.ng-select.ng-select-opened>.ng-select-container {
    border: 2px solid var(--cl-accent);
}
// Fix multiple select content jump on open(due to border)
.ng-select.ng-select-multiple.ng-select-opened .ng-select-container .ng-value-container {
    padding-left: 6px;
    padding-top: 4px;
}

// Fix material checkbox
mat-checkbox, .mat-checkbox-inner-container {
    width: 30px !important;
    height: 30px !important;
}
// Frame border
.mat-checkbox-frame {
    border: 1px solid #ccc !important;
}
.mat-checkbox-background {
    border-radius: 4px !important;
}
// Animation circle
.mat-checkbox-checked:not(.mat-checkbox-disabled).mat-accent .mat-ripple-element, .mat-checkbox:active:not(.mat-checkbox-disabled).mat-accent .mat-ripple-element {
    background-color: #ccc !important;
}
// Checked background
.mat-checkbox-indeterminate.mat-accent .mat-checkbox-background, .mat-checkbox-checked.mat-accent .mat-checkbox-background {
    background-color: #ccc !important;
}

